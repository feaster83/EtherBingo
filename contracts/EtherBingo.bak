pragma solidity ^0.4.11;

contract EtherBingo {
  /*  uint constant MAX_NUMBER = 99;
    uint constant NUMBERS_ON_CARD = 25;

    struct Card {
        uint cardId;
        address owner;
        uint gameNumber;
        uint[] numbers;
    }
    mapping(uint => Card) cards;

    uint cardIdCounter = 0;

    event eventNewCardGenerated(address owner, uint cardId);

    function EtherBingo() public {
    }
*/
    function buyCard() public {
//        uint gameNr = getGameCounter();
//        uint[] memory numbers;
//        for (uint nrIndex = 0; nrIndex <= NUMBERS_ON_CARD; nrIndex++) {
//            numbers[nrIndex] = 10 + nrIndex;
//        }
//        cardIdCounter = cardIdCounter + 1;
//        uint cardId = 1;
//        cards[cardId] = Card(cardId, msg.sender, gameNr, numbers);
//
//        eventNewCardGenerated(msg.sender, cardId);
    }

//    function getRandomNumber() internal returns (uint) {
//        return uint(block.blockhash(block.number - 1)) * (cardIdCounter++ ^ 13) % (MAX_NUMBER+1);
//    }
//
//    function getCardNumber(uint cardId, uint index) public returns (uint) {
//        if (cardIdCounter < cardId) {
//            throw;
//        }
//
//        return cards[cardId].numbers[index];
//    }
//
//    function getGameCounter() public returns (uint) {
//        return (cardIdCounter % 4);
//    }

}
